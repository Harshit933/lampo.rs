//! Event generated by onchain events.
use std::fmt::Debug;

#[cfg(feature = "vanilla")]
use crate::btc::bitcoin::absolute::Height;
#[cfg(feature = "rgb")]
use crate::btc::bitcoin::blockdata::locktime::Height;
#[cfg(feature = "vanilla")]
use crate::btc::bitcoin::block::Header;
#[cfg(feature = "rgb")]
use crate::btc::bitcoin::blockdata::block::BlockHeader as Header;
use crate::btc::bitcoin::{Block, Transaction, Txid};

#[derive(Clone)]
pub enum OnChainEvent {
    NewBlock(Block),
    NewBestBlock((Header, Height)),
    FeeEstimation(u32),
    SendRawTransaction(Transaction),
    ConfirmedTransaction((Transaction, u32, Header, Height)),
    DiscardedTransaction(Txid),
    UnconfirmedTransaction(Txid),
}

impl Debug for OnChainEvent {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::ConfirmedTransaction((tx, idx, header, height)) => write!(
                f,
                "ConfirmedTransaction(txid: {}, idx {idx}, block: {:?}, height: {height})",
                tx.txid(),
                header
            ),
            Self::NewBestBlock((header, height)) => {
                write!(f, "NewBestBlock({}, {height})", header.block_hash())
            }
            Self::NewBlock(block) => write!(f, "NewBlock({})", block.block_hash()),
            Self::SendRawTransaction(tx) => write!(f, "SendRawTransaction({})", tx.txid()),
            Self::UnconfirmedTransaction(tx) => write!(f, "UnconfirmedTransaction({})", tx),
            _ => write!(f, "Debug fmt not unsupported"),
        }
    }
}
